/* Testing quicksort. */

#include "sort.h"

#define N_ELEM 10000
#define RANGE 100000
#define N_ARR 30

int main(void)
{
	int *a[N_ELEM];
	int i, j;

	srand(time(NULL));

	for (i = 0; i < N_ARR; ++i) {
		*(a + i) = calloc(N_ELEM, sizeof(int));
	}

	/*Sorting arrays in ORDER*/
	/*for (i = 0; i < N_ARR; ++i) {
		for (j = 0; j < N_ELEM; ++j) {
			a[i][j] = (N_ELEM - j - 1) % RANGE;
		}
	}*/

	/*for (i = 0; i < N_ARR; ++i) {
	 printf("Array (%c) before sort (reverse order):\n", 'a' + i);
	 print_arr(*(a + i), N_ELEM);
	 }*/
	/*
	printf("Press enter to sort ORDERED arrays:");
	if (getchar() != '\n') {
		exit(1);
	}
	start_time();
	printf("Quicksorting ...\n");
	for (i = 0; i < N_ARR; ++i) {
		quicksort(a[i], a[i] + N_ELEM - 1);
	}
	print_time();

	printf("Press 'y' to see sorted arrays:");
	if (getchar() == 'y') {
		for (i = 0; i < N_ARR; ++i) {
			printf("Sorted array (%c):\n", 'a' + i);
			print_arr(*(a + i), N_ELEM);
		}
	}*/

	/*Sorting arrays in REVERSE order*/
	/*for (i = 0; i < N_ARR; ++i) {
		for (j = 0; j < N_ELEM; ++j) {
			a[i][j] = (N_ELEM - j - 1) % RANGE;
		}
	}*/

	/*for (i = 0; i < N_ARR; ++i) {
	 printf("Array (%c) before sort (reverse order):\n", 'a' + i);
	 print_arr(*(a + i), N_ELEM);
	 }*/

	/*printf("Press enter to sort REVERSED arrays:");
	if (getchar() != '\n') {
		exit(1);
	}
	start_time();
	printf("Quicksorting ...\n");
	for (i = 0; i < N_ARR; ++i) {
		quicksort(a[i], a[i] + N_ELEM - 1);
	}
	print_time();

	printf("Press 'y' to see sorted arrays:");
	if (getchar() == 'y') {
		for (i = 0; i < N_ARR; ++i) {
			printf("Sorted array (%c):\n", 'a' + i);
			print_arr(*(a + i), N_ELEM);
		}
	}*/

	/*Sorting arrays in RANDOM order*/
	for (i = 0; i < N_ARR; ++i) {
		for (j = 0; j < N_ELEM; ++j) {
			a[i][j] = rand() % RANGE;
		}
	}

	/*for (i = 0; i < N_ARR; ++i) {
	 printf("Array (%c) before sort (reverse order):\n", 'a' + i);
	 print_arr(*(a + i), N_ELEM);
	 }*/

	printf("Press enter to sort RANDOM arrays:");
	if (getchar() != '\n') {
		exit(1);
	}
	start_time();
	printf("Quicksorting ...\n");
	for (i = 0; i < N_ARR; ++i) {
		quicksort(a[i], a[i] + N_ELEM - 1);
	}
	print_time();

	printf("Press 'y' to see sorted arrays:");
	if (getchar() == 'y') {
		for (i = 0; i < N_ARR; ++i) {
			printf("Sorted array (%c):\n", 'a' + i);
			print_arr(*(a + i), N_ELEM);
		}
	}

	/*Free all arrays*/
	for (i = 0; i < N_ARR; ++i) {
		free(a[i]);
	}

	return 0;
}

void print_arr(int a[], long int n)
{
	printf("%5d ", a[0]);
	printf("  ... ");
	printf("%5d ", a[(n - 1) / 2]);
	printf("  ... ");
	printf("%5d ", a[n - 1]);
	printf("\n");
}
