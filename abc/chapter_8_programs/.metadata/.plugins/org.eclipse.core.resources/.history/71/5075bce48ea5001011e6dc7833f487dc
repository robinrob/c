/* Testing quicksort. */

#include "sort.h"

#define N_ELEM 1000000
#define RANGE 1000
#define N_ARR 30

void sort(int **a, int n_piv);
void sort_ordered(int **a);
void sort_reversed(int **a);
void sort_rand(int **a);
void check_arr(int **a);

int main(void)
{
	int *a[N_ELEM];
	int i, n_piv;

	srand(time(NULL));

	for (i = 0; i < N_ARR; ++i) {
		*(a + i) = calloc(N_ELEM, sizeof(int));
	}

	printf("Enter number of pivots: ");
	scanf("%d", &n_piv);

	sort_rand(a);
	sort_ordered(a);
	sort_reversed(a);

	/*Free all arrays*/
	for (i = 0; i < N_ARR; ++i) {
		free(a[i]);
	}

	return 0;
}

/*Sorting RANDOM arrays.*/
void sort_rand(int **a)
{
	int i, j;

	printf("\nInitialising RANDOM arrays ...\n");
	for (i = 0; i < N_ARR; ++i) {
		for (j = 0; j < N_ELEM; ++j) {
			a[i][j] = rand() % RANGE;
		}
	}

	check_arr(a);
	printf("Press 'enter' to sort RANDOM arrays:");
	if (getchar() != '\n') {
		exit(1);
	}
	sort(a, n_piv);
	check_arr(a);
}

/*Sorting ORDERED arrays.*/
void sort_ordered(int **a)
{
	int i, j;

	printf("\nInitialising ORDERED arrays ...\n");
	for (i = 0; i < N_ARR; ++i) {
		for (j = 0; j < N_ELEM; ++j) {
			a[i][j] = (long) (RANGE * j) / N_ELEM;
		}
	}

	check_arr(a);
	printf("Press 'enter' to sort ORDERED arrays:");
	if (getchar() != '\n') {
		exit(1);
	}
	sort(a, n_piv);
	check_arr(a);
}

/*Sorting REVERSE-order arrays.*/
void sort_reversed(int **a)
{
	int i, j;

	printf("\nInitialising REVERSED arrays ...\n");
	for (i = 0; i < N_ARR; ++i) {
		for (j = 0; j < N_ELEM; ++j) {
			a[i][j] = RANGE - 1 - (long) (RANGE * j) / N_ELEM;
		}
	}

	check_arr(a);
	printf("Press 'enter' to sort REVERSED arrays:");
	if (getchar() != '\n') {
		exit(1);
	}
	sort(a);
	check_arr(a);
}

void sort(int **a, int n_piv)
{
	int i;
	start_time();
	printf("Quicksorting ...\n");
	for (i = 0; i < N_ARR; ++i) {
		quicksort(a[i], a[i] + N_ELEM - 1, n_piv);
	}
	print_time();
}

void check_arr(int **a)
{
	int i;
	printf("Press 'y' to check arrays ('enter' to continue):");
	if (getchar() == 'y') {
		for (i = 0; i < N_ARR; ++i) {
			printf("Array (%c) (%d elements):\n", 'a' + i, N_ELEM);
			print_arr(*(a + i), N_ELEM);
		}
	}
}

void print_arr(int a[], long int n)
{
	int i;
	for (i = 0; i < 5; ++i) {
		printf("%5d ", a[i]);
	}
	printf("\n    ... \n");
	for (i = n / 2; i < (n / 2 + 5); ++i) {
		printf("%5d ", a[i]);
	}
	printf("\n    ... \n");
	for (i = n - 5; i < n; ++i) {
		printf("%5d ", a[i]);
	}
	printf("\n");
}
