/* Quicksort! Pointer version with macros. */

#include "sort.h"

#define swap(x, y)		{ int t; t = x; x = y; y = t; }
#define order(x, y)		if (x > y) swap(x, y)
#define o2(x, y)		order(x, y)
#define o3(x, y, z)		o2(x, y); o2(x, z); o2(y, z)

typedef enum {yes, no} yes_no;

static char **find_pivot(char **left, char **right);
static char **partition(char **left, char **right, char **pivot);

void quicksort(char **list, int n, char **left, char **right)
{
  char **pivot, **p;

  printf("quicksort: *left: %s, *right: %s\n", *left, *right);
  printf("quicksort: sublist: \n");

    pivot = find_pivot(left, right);
    p = partition(left, right, pivot);
    quicksort(list, n, left, p - 1);
    quicksort(list, n, p, right);
}

static char **find_pivot(char **left, char **right)
{
  return left + (right - left) / 2;
}

static char **partition(char **left, char **right, char **pivot)
{
  while (str_comp(*left, *right)) {
    while (str_comp(*left, *pivot))
      ++left;
    while ((str_comp(*right, *pivot) == -1) || (str_comp(*right, *pivot) == 0))
      --right;
    if (left < right) {
      swap_string(left, right);
      ++left;
      --right;
    }
  }
  return left;
}

