/* Quicksort! Pointer version with macros. */

#include "sort.h"

#define swap(x, y)		{ int t; t = x; x = y; y = t; }
#define order(x, y)		if (x > y) swap(x, y)
#define o2(x, y)		order(x, y)
#define o3(x, y, z)		o2(x, y); o2(x, z); o2(y, z)

typedef enum {yes, no}	yes_no;

static yes_no	find_pivot(char **left, char **right, int *pivot_ptr);
static char **partition(char **left, char **right, int pivot);
void quicksort(char **left, char **right);

void quicksort(char **left, char **right)
{
	char **p;
	int pivot;
	
	printf("quicksort: *left: %s, *right: %s\n", *left, *right);
	if (getchar() != '\n') {
		exit(1);
	}
	if (find_pivot(left, right, &pivot) == yes) {
		p = partition(left, right, pivot);
		printf("pivot: %s\n", *p);
		quicksort(left, p - 1);
		quicksort(p, right);
	}
}

static yes_no find_pivot(char **left, char **right, int *pivot_ptr)
{
	int a, b, c, v_l, v_r, v_p;
	char **p;
	
	v_l = string_val(*left);
	v_r = string_val(*right);

	a = v_l;
	b = string_val(*left + (*right - *left) / 2);
	c = v_r;
	printf("find_pivot, left: %s\n", *left);
	printf("a: %d, b: %d, c: %d\n", a, b, c);
	o3(a, b, c);
	printf("a: %d, b: %d, c: %d\n", a, b, c);
	if (a < b) {
		*pivot_ptr = b;
		return yes;
	}
	if (b < c) {
		*pivot_ptr = c;
		return yes;
	}
	for (p = left + 1; p <= right; ++p) {
		v_p = string_val(*p);
		if (v_p != v_l) {
			*pivot_ptr = v_p < v_l ? v_l : v_p;
			return yes;
		}
	}
	return no;
}

char **partition(char **left, char **right, int pivot)
{
	while (left <= right) {
		while (string_val(*left) < pivot)
			++left;
		while (string_val(*right) >= pivot)
			--right;
		if (left < right) {
			swap_string(left, right);
			++left;
			--right;
		}
	}
	return left;
}

