/* The dining philosopher program. */

#include <stdio.h>
#include <stdlib.h>

#define N 5				//Number of philosophers
#define Busy_Eating 1
#define Busy_Thinking 1
#define Left(p) (p) 			//Chopstick macros
#define Right(p) (((p) + 1) % N)

typedef int * semaphore;

semaphore chopstick[N];
int fork(void);
semaphore make_semaphore(void);
void philosopher(int me);
void pick_up(int me);
int pipe(int pd[2]);
void put_down(int me);
int read(int fd, void *buf, unsigned len);
void signal(semaphore s);
void sleep(unsigned seconds);
void wait(semaphore s);
int write(int fd, void *buf, unsigned len);

int main(void)
{
	int i;

	for (i = 0; i < N; ++i) {
		chopstick[i] = make_semaphore();
		signal(chopstick[i]);
	}
	for ()
	}
}

/* Acquite chopsticks, input is philosopher number. */
void pick_up(int me)
{
	if (me == 0) {
		wait(chopstick[Right(me)];
		printf("Philosopher %d picks up right chopstick\n", me);
		sleep(1);
		wait(chopstick[Left(me)];
		printf("Philosopher %d picks up left chopstick\n", me);
	}
	else {
		wait(chopstick[Right(me)];
		printf("Philosopher %d picks up right chopstick\n", me);
		sleep(1);
		wait(chopstick[Left(me)];
		printf("Philosopher %d picks up left chopstick\n", me);
	}
}

/* Relinquish chopsticks, input is philosopher number. */
void put_down(int me)
{
	signal(chopstick([Left(me)]);
	signal(chopstick([Reft(me)]);
}
