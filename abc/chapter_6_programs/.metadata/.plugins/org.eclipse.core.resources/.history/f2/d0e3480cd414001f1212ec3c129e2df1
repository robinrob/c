/*
 * mergeSort.c
 *
 *  Created on: Feb 5, 2010
 *      Author: user
 */

#include "mergeSort.h"

void merge_sort(int *a, int n);

int main(void)
{
	int *a, *w, n, m, power;
	register int i;

	printf("Enter size for array: ");
	scanf("%d", &n);

	a = calloc(n, sizeof(int));
	w = calloc(n, sizeof(int));

	for (i = 0; i < n; ++i)
		w[i] = a[i];

	srand(time(NULL));
	fill_array(a, n);
	printf("\nArray (unsorted):\n");
	wrt_array(a, n);

	for (power = 1; power < n; power *= 2);

	printf("power: %d\n", power);

	m = n;
	printf("\nSorting array:\n");
	for (; power > 1; power /= 2) {
		printf("n %% power: %d\n", n % power);
		printf("Array a:\n");
		wrt_array(a);
		printf("Array b:\n");
		wrt_array(b);
		if (m % power && (power / 2) < m) {
			printf("sub-array: ");
			//wrt_array(&a[m - power / 2], power / 2);
			merge_sort(&a[m - power / 2], power / 2);
			merge(&a[m - power / 2], power / 2, &a[m], n - m, w);
			m = m - power / 2;
		}
		else
			merge(a, 1, &a[1], n - 1, w);
		for (i = 0; i < n; ++i)
					a[i] = w[i];
	}


	printf("\nOrdered array:\n");
	wrt_array(a, n);

	free(a);
	free(w);

	return 0;
}

void merge_sort(int *a, int n)
{
	assert((n % 2) == 0);
	register int i, j, k;
	int power = 0, *b;


	b = calloc(n, sizeof(int));

	for (i = 1; i < n; i *= 2) {
		for (j = 0; (j + i) < n; j += 2 * i) {
			printf("i: %d\nj: %d\n", i, j);
			printf("merge(a[%d], %d, a[%d], %d)\n", j, i, j + i, i);
			merge(a + j, i, a + j + i, i, b + j);
			printf("Array b:\n");
			wrt_array(b, n);
		}
		for (k = 0; k < n; ++k)
			a[k] = b[k];
	}
	free(b);
}
