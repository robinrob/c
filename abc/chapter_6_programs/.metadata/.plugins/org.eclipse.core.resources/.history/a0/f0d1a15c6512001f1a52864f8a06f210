/* Merges two ordered arrays into a third ordered array
 * mergeSort.c
 *
 *  Created on: Feb 5, 2010
 *      Author: user
 */

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void fill_array(int *a, int n);
void wrt_array(int *a, int n);
void bubble_sort(int *a, int n);
int * merge_sort(int *a, int n, int *b, int m);
void swap(int *a, int *b);

int main(void)
{
	int *a, *b, *c, n, m;

	printf("Enter size for array a: ");
	scanf("%d", &n);
	printf("Enter size for array b: ");
	scanf("%d", &m);

	a = calloc(n, sizeof(int));
	b = calloc(m, sizeof(int));

	srand(time(NULL));
	fill_array(a, n);
	fill_array(b, n);
	printf("Array a (unsorted):\n");
	wrt_array(a, n);
	printf("Array b (unsorted):\n");
	wrt_array(b, m);
	bubble_sort(a, n);
	printf("Array a (sorted):\n");
	bubble_sort(b, m);
	printf("Array b (sorted):\n");

	merge_sort(a, n, b, m);
	printf("Combined ordered array:\n");
	wrt_array(c, n + m);

	return 0;
}


void fill_array(int *a, int n)
{
	int i;

	for (i = 0; i < n; ++i)
		a[i] = rand() % 19 - 9;
}

void wrt_array(int *a, int n)
{
	int i;

	printf("a = [");
	for (i = 0; i < n; ++i)
		printf("%d%s", a[i], ((i < n - 1) ? ", " : "]\n"));
}

void bubble_sort(int *a, int n)
{
	register int i, j;
	int cunt = 0;

	for (i = 0; i < n - 1; ++i)
		for (j = n - 1; j > i; --j) {
			wrt_array(a, n);
			if (*(a + j) > *(a + j - 1))
				swap(&(*(a + j - 1)), &(*(a + j)));
			++cunt;
		}
	wrt_array(a, n);
	printf("Number of iterations: %d\n", cunt);
}

int * merge_sort(int *a, int n, int *b, int m)
{
	register int i, j, k;
	int *c;

	c = calloc(n + m, sizeof(int));

	i = 0, j = 0;
	for (k = 0; k < (n + m); ++k) {
		if (a[i] > b[j]) {
			c[k] = a[i];
			++i;
		}
		else {
			c[k] = b[j];
			++j;
		}
	}
	return c;
}

void swap(int *a, int *b)
{
	int temp;
	temp = *a;
	*a = *b;
	*b = temp;
}
