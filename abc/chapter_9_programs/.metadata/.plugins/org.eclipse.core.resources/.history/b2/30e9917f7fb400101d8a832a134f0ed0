/* Functions for scoring and comparing Poker hands. */

#include "poker.h"

//Returns the Poker score of the given hand.
pkr_score score_hand(card h[5])
{
	pkr_score score;
	int high_cd;
	if (high_cd = is_straight_flush(h)) {
		score.hand = straight_flush;
	}
	else if (is_four_kind(h)) {
		score.hand = four_kind;
	}
	else if (is_full_house(h)) {
		score.hand = full_house;
	}
	else if (is_flush(h)) {
		score.hand = flush;
	}
	else if (is_straight(h)) {
		score.hand = straight;
	}
	else if (is_three_kind(h)) {
		score.hand = three_kind;
	}
	else if (is_two_pair(h)) {
		score.hand = two_pair;
	}
	else if (is_pair(h)) {
		score.hand = pair;
	}
	else {
		score.hand = high_card;
	}
	score.high_card = high_cd;
	return score;
}

//Comparison function for sorting cards by pips value, to use with qsort().
int cmp_pips(const void *vp, const void *vq)
{
	const int *p = &(((card *) vp) -> pips);
	const int *q = &(((card *) vq) -> pips);
	int diff = *q - *p;
	return (diff >= 0) ? ((diff > 0) ? +1 : 0) : -1;
}

//Compares two hands.
int cmp_hands(card h1[], card h2[])
{
	int i, diff;
	pkr_score score1, score2;
	qsort(h1, 5, sizeof(card), cmp_pips);
	qsort(h2, 5, sizeof(card), cmp_pips);
	score1 = score_hand(h1);
	score2 = score_hand(h2);
	diff = score1.hand - score2.hand;
//	if (diff == 0) {
//		for (i = 0; i < 5; ++i) {
//			diff = cmp_pips(h1 + i, h2 + i);
//			if (diff == 0) {
//				continue;
//			}
//		}
//	}
	return diff;
}

/* Compares the given hand with another randomly-generated one, displays both
 * and states the better hand.
 */
void cmp_two_hands(card deck[52], card h1[])
{
	int diff;
	card h2[5];
	shuffle(deck);
	deal_the_cards(deck, h2);
	printf("\nHAND COMPARISON:\n\n");
	printf("hand1:\n");
	print_cards(h1, 5);
	printf("hand2:\n");
	print_cards(h2, 5);
	printf("best hand: ");
	diff = cmp_hands(h1, h2);
	diff >= 0 ? (diff > 0 ? printf("hand2\n") : printf("EQUAL!\n"))\
			    : printf("hand1\n");
}


