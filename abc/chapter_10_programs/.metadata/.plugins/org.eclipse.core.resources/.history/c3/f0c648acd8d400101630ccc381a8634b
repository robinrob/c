/* Miscellaneous functions for Singly-Linked Lists. */

#include "sllist.h"

/* Counts the length of a list recursively. */
int cnt_list(NODE *list)
{
	if (list == NULL) {
		return 0;
	}
	else {
		return cnt_list(list -> next) + 1;
	}
}

/* Turns a cycling list into a straight & finite list. */
void decycle(NODE *list)
{
	int head_ad = (int) list;
	while (list -> next != NULL) {
		if ((int) (list -> next) == head_ad) {
			list -> next = NULL;
			break;
		}
		list = list -> next;
	}
}

/* Returns a pointer to the NODE at the given list
 * position in the given list. */
NODE* get_node(NODE* list, int pos)
{
	int i = 1;
	NODE *p = list;
	assert(pos >= 1);
	assert(list != NULL);

	while (i < pos) {
		if (p == NULL) {
			return p;
		}
		p = p -> next;
		++i;
	}
	return p;
}



