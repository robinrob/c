/* Miscellaneous functions for Singly-Linked Lists. */

#include "sllist.h"

/* Creates a DATA list from an array of DATA values
 * and returns a reference to the head of the list. */
NODE* create_l(DATA *array, int n)
{
	int i;
	NODE *p, *list;
	p = malloc(sizeof(NODE));
	list = p;

	for (i = 0; i < n - 1; ++i) {
		p -> data = *(array + i);
		p -> next = malloc(sizeof(NODE));
		p = p -> next;
	}
	p -> data = *(array + n - 1);
	p -> next = NULL;

	return list;
}

//Counts the length of a list.
int cnt_list(NODE *list)
{
	if (list == NULL) {
		return 0;
	}
	else {
		return cnt_list(list -> next) + 1;
	}
}

/* Turns a cycling list into a straight & finite list. */
void decycle(NODE *list)
{
	int head_ad = (int) list;
	while (list -> next != NULL) {
		if ((int) (list -> next) == head_ad) {
			list -> next = NULL;
			break;
		}
		list = list -> next;
	}
}


