/* Functions for Singly-Linked Lists. */

#include "sllist.h"

/* Creates a DATA list from an array of DATA values
 * and returns a reference to the head of the list. */
NODE* create_l(DATA *array, int n)
{
	int i;
	NODE *p, *list;
	p = malloc(sizeof(NODE));
	list = p;

	for (i = 0; i < n - 1; ++i) {
		p -> data = *(array + i);
		p -> next = malloc(sizeof(NODE));
		p = p -> next;
	}
	p -> data = *(array + n - 1);
	p -> next = NULL;

	return list;
}

/* Prints a list of DATA values by following the links. */
void print_list(NODE *list)
{
	while(list != NULL) {
		printf("list NODE:  %s%10s%s%d%s%d\n",
						"name: ", list -> data.name,
						", age: ", list -> data.age,
						", weight: ", list -> data.weight);
		list = list -> next;
	}
	if (list == NULL) {
		printf("list NODE:  NULL\n");
	}
	else {
		printf("--MISSING NULL!--\n");
	}
	putchar('\n');
}

/* Prints a list of DATA values using iteration. */
void print_list_it(NODE *list)
{
	int i, n = cnt_list(list);

	printf("n: %d\n", n);
	for (i = 0; i < n; ++i) {
		printf("list element:  %s%10s%s%d%s%d\n",
						"name: ", list -> data.name,
						", age: ", list -> data.age,
						", weight: ", list -> data.weight);
		list = list -> next;
	}
	putchar('\n');
}

//Counts the length of a list.
int cnt_list(NODE *list)
{
	if (list == NULL) {
		return 0;
	}
	else {
		return cnt_list(list -> next) + 1;
	}
}

/* Bubble-sorts a list of DATA values using the
 * specified sorting key.
 */
void bubb_sort_list(NODE *list, sort_key key, void comp_func(NODE *, sort_key))
{
	int i, n = cnt_list(list);

	NODE *p = list;
	for (i = 0; i < n; ++i) {
		while (p -> next != NULL) {
			comp_func(p, key);
			p = p -> next;
		}
	}
}

/* Compares the data stored in the given node
 * and the next one using the specified key value.
 * The data values are swapped if they are out of order.
 */
void compare(NODE *n, sort_key key)
{
	int diff = 0;
	switch(key)
	{
	case age:
		diff = n -> data.age - n -> next -> data.age;
		break;
	case name:
		diff = strcmp(n -> data.name, n -> next -> data.name);
		break;
	case weight:
		diff = n -> data.weight - n -> next -> data.weight;
		break;
	default:
		printf("Programmer error!\n");
		break;
	}
	if (diff > 0) {
		DATA tmp = n -> next -> data;
		n -> next -> data = n -> data;
		n -> data = tmp;
	}
}

/* Concatenates list2 onto the end of list1,
 * no matter what! */
NODE * concat(NODE *list1, NODE *list2)
{
	while (list1 != NULL) {
		list1 = list1 -> next;
	}
}

/* Concatenates list2 onto the end of list1
 * ONLY if the two lists are not equal. */
NODE* concatenate(NODE *list1, NODE *list2)
{
	NODE *head;

	if (list1 == NULL) {
		return list2;
	}
	head = list1;
	if (check_equal_lists(list1, list2) == true) {
		printf("%s\n%s\n",
				"Lists are equal and cycle would result,",
				"Will not concatenate.");
		return head;
	}
	while (list1 -> next != NULL) {
		list1 = list1 -> next;
	}
	list1 -> next = list2;
	return head;
}

/* Checks to see if the two lists are equal. */
boolean check_equal_lists(NODE* list1, NODE *list2)
{
	while (list1 != NULL && list2 != NULL) {
		printf("looping\n");
		if (check_equal_data(list1 -> data, list2 -> data)) {
			return false;
		}
		list1 = list1 -> next;
		list2 = list2 -> next;
	}
	return true;
}

/* Checks to see if two DATA structures are equal or not. */
boolean check_equal_data(DATA d1, DATA d2)
{
	if (d1.name == d2.name &&
		d1.age == d2.age &&
		d1.weight == d2.weight) {
		return true;
	}
	return false;
}

/* Checks to see whether a list is a cycle. */
boolean iscycle(NODE *list)
{
	int head_ad = (int) list;
	while (list -> next != NULL) {
		list = list -> next;
		if (((int) list) == head_ad) {
			return true;
		}
	}
	return false;
}

/* Turns a cycling list into a straight & finite list. */
void decycle(NODE *list)
{
	int head_ad = (int) list;
	while (list -> next != NULL) {
		if ((int) (list -> next) == head_ad) {
			list -> next = NULL;
			break;
		}
		list = list -> next;
	}
}

/* Inserts an element into the given list, at the
 * given list position (starting from 1). */
void insert(DATA d, NODE **list, int pos)
{
	NODE *p, *next, *prev;
	assert(pos >= 0);
	assert(*list != NULL);

	p = malloc(sizeof(NODE));
	p -> data = d;
	if (pos == 0) {
		next = *list;
		*list = p;
	}
	else {
		int length = cnt_list(*list);
		if (pos > (length + 1)) {
			pos = length + 1;
		}
		prev = get_node(*list, pos - 1);
		next = prev -> next;
		prev -> next = p;
	}
	p -> next = next;
}

/* Deletes an element at the given list position
 * in the given list (starting from 1).
 */
void delete(NODE **list, int pos)
{
	NODE *p, *prev, *next;
	assert(pos >= 0);
	assert(*list != NULL);

	if (pos == 0) {
		p = *list;
		*list = (*list) -> next;
	}
	else {
		prev = get_node(*list, pos - 1);
		p = prev -> next;
		next = p -> next;
		prev -> next = next;
	}
	free(p);
}

/* Returns a pointer to the NODE at the given list
 * position in the given list. */
NODE* get_node(NODE* list, int pos)
{
	int i = 1;
	NODE *p = list;
	assert(pos >= 1);
	assert(list != NULL);

	while (i < pos) {
		if (p == NULL) {
			return p;
		}
		p = p -> next;
		++i;
	}
	return p;
}



