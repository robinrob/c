/* Miscellaneous functions for Singly-Linked Lists. */

#include "sllist.h"

/* Turns a cycling list into a straight & finite list. */
void decycle(NODE *list)
{
	int head_ad = (int) list;
	while (list -> next != NULL) {
		if ((int) (list -> next) == head_ad) {
			list -> next = NULL;
			break;
		}
		list = list -> next;
	}
}

/* Returns a pointer to the NODE at the given list
 * position in the given list (starting from 0). */
NODE* get_node(NODE* list, int pos)
{
	int i = 0;

	assert(pos >= 0);

	while (i < pos) {
		if (list == NULL) {
			return list;
		}
		list = list -> next;
		++i;
	}
	return list;
}



