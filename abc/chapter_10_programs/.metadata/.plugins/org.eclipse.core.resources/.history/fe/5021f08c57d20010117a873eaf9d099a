/* Creating a linked list from an array. */

#include "list.h"

#define N 5

int main(void)
{
	DATA *d = calloc(N, sizeof(DATA));
	NODE *list;

	d[0].name = "Robin",		d[0].age = 23, d[0].weight = 63;
	d[1].name = "Bob Brown",	d[1].age = 36, d[1].weight = 83;
	d[2].name = "Snake Doc",	d[2].age = 39, d[2].weight = 10000;
	d[3].name = "Betty Blue",	d[3].age = 36, d[3].weight = 75;
	d[4].name = "Mac",			d[4].age = 37, d[4].weight = 87;

	printf("The list:\n");
	list = create_l(d, N);
	print_list(list);

	d[0].name = "Spiderman",	d[0].age = 99, d[0].weight = 0;

	/* Sort DATA list by age & print it */
	printf("Sorted by age:\n");
	bubb_sort_list(list, age, compare);
	print_list(list);

	/* Sort DATA list by name & print it */
	printf("Sorted by name:\n");
	bubb_sort_list(list, name, compare);
	print_list(list);

	/* Sort DATA list by weight & print it */
	printf("Sorted by weight:\n");
	bubb_sort_list(list, weight, compare);
	print_list(list);

	/* Check list is a cycle */
	printf("Is list a cycle? %s\n", iscycle(list) ? "NO" : "YES");

	/* Turn list into a cycle & check if it's a cycle */
	concat(list, list);
	printf("Is list a cycle? %s\n", iscycle(list) ? "NO" : "YES");

	/* De-cycle the list and check if it's a cycle */
	decycle(list);
	printf("Is list a cycle? %s\n", iscycle(list) ? "NO" : "YES");

	/* Print list using iterative version */
	printf("\nThe list printed iteratively:\n");
	print_list_it(list);

	free(d);
	free(list);

	return 0;
}
