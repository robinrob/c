/* functions.c
 *
 * Functions for the base_change project.
 */

#include "base_change.h"

/* Prints the start message for the program */
void print_message(void)
{
	printf("%s",
			"This program will convert a given number to a given base.\n"
			"To change base (once chosen) enter -1 at the base prompt.\n"
			"To exit the program enter -1 again at the number prompt.\n\n");
}

//Gets a number from the user.
int get_num()
{
	return get_int("Enter a number  ", 1, MAX_NUM);
}

//Gets a base number from the user.
int get_base()
{
	return get_int("Enter base to convert to", 1, MAX_BASE);
}

/* Gets an integer from the user. */
int get_int(char *prompt, int lowest, int highest)
{
	int n = NULL_INT;

	while (n == NULL_INT || n < lowest || n > highest) {
		printf("%s (%d to %d): ", prompt, lowest, highest);
		scanf("%d", &n);
		printf("n: %d\n", n);
		if (n == NULL_INT) break;
		else if (!(n >= lowest && n <= highest)) {
			printf("number must be from %d to %d!\n", lowest, highest);
		}
	}
	return n;
}

/* This is where the business happens: this function calculates and displays
 * an array of symbols representing the given number num in the given base.
 */
void calculate_display(int base, long num)
{
	int i;
	int n_digits;			//number of digits in the converted number
	unsigned long power;	//holds a power of the given base e.g. 8 would be
							//the 3rd power of base 2
	char *new_num;			//stores the converted number as a sequence of
							//characters from '0'-'Z' depending on the base
	char digit;				//holds a digit of new_num

	//Simple case where the given base is 1
	if (new_num > MAX_NUM) {
		printf("error! exiting\n");
		exit(0);
	}
	if (base == 1) {
		new_num = calloc(num, sizeof(int));
		for (i = 0; i < num; ++i) {
			*(new_num + i) = 1;		//new_num is a sequence of '1's of size num
		}
		n_digits = num;				//n_digits in this case is equal to num
	}
	//Here is the conversion to a base other than 1
	else {
		//For base > 1, find the highest power of the base number we need in
		//order to represent num and store it in power.
		//Record the number of digits required to represent num in new base.
		for (power = 1, n_digits = 1;
				power * base <= num;
					++n_digits, power *= base);

		new_num = calloc(n_digits, sizeof(int));	//initialise new_num

		for (i = 0; power >= 1; power /= base, ++i) {
			digit = num / power;   //digit is the integer factor of power in num
			num -= digit * power;
			if (digit > 9) {
				digit = 'A' + digit - 10;	//symbols for bases > 10
			}
			*(new_num + i) = digit;	//record digit in new_num
		}
	}
	print_array(new_num, n_digits); //display array of symbols representing num
									//in the new base
	free(new_num);
}

/* Prints a character array of length n with no spaces. */
void print_array(char *a, long int n)
{
	long int i;
	for (i = 0; i < n; ++i) {
		a[i] <= 9 ? printf("%d", a[i]) : printf("%c", a[i]);
	}
	printf("\n");
}
